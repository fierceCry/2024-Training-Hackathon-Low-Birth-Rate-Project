generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @map("email")
  password      String
  name      String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt  @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  
  refreshTokens RefreshToken[]
  chat          Chat[]
  scrap         Scrap[]
  @@map("user")
}

model RefreshToken {
  id     Int           @id @default(autoincrement())
  userId Int           @map("user_id") @unique
  token  String
  user   User          @relation(fields: [userId], references: [id])

  @@map("refresh_token")
}

model BirthSupportData {
  id                        Int            @id @default(autoincrement())               // 고유 ID
  number                    String                                                     // 지원 프로그램 번호
  title                     String         @db.Text                                             // 지원 프로그램 제목
  registrationDate          String         @map("registration_date")                   // 등록일
  addressProvince           String         @map("address_province")                    // 주소 (도)
  addressCity               String         @map("address_city")                        // 주소 (시/군/구)
  viewCount                 Int?           @default(0) @map("view_count")              // 조회수
  scrapCount                Int?            @default(0) @map("scrap_count")             // 스크랩 수
  createdAt                 DateTime       @default(now()) @map("created_at")          // 생성일
  updatedAt                 DateTime       @updatedAt  @map("updated_at")              // 업데이트일
  deletedAt                 DateTime?      @map("deleted_at")                          // 삭제일 (논리 삭제)

  // 상세 페이지의 세부 내용을 각 필드로 분리
  supportTarget             String?        @db.Text @map("support_target")             // 지원 대상
  supportContent            String?        @db.Text @map("support_content")            // 지원 내용
  inquiryContact            String?        @db.Text @map("inquiry_contact")            // 문의처
  inquiryDetail             String?        @db.Text @map("inquiry_detail")             // 문의
  applicationMethod         String?        @db.Text @map("application_method")         // 신청 자격
  requiredDocuments         String?        @db.Text @map("required_documents")         // 구비 서류
  source                    String?        @db.Text @map("source")                     // 출처
  eligibility               String?        @db.Text @map("eligibility")                // 지원 자격
  supportAmount             String?        @db.Text @map("support_amount")             // 지원 금액
  applicationPeriod         String?        @db.Text @map("application_period")         // 신청기간
  applicationMethodDetail   String?        @db.Text @map("application_method_detail")  // 신청방법
  supportItems              String?        @db.Text @map("support_items")              // 지원품목

  scrap                     Scrap[]                                                    // 스크랩 정보와의 관계

  @@map("birth_support_data")
}

model Scrap {
  id Int @id @default(autoincrement())
  userId Int 
  birthSupportDataId Int @map("birth_support_data_id")
  createdAt  DateTime  @default(now())  @map("created_at")  
  updatedAt  DateTime  @updatedAt       @map("updated_at")
  deletedAt  DateTime?      @map("deleted_at")                          // 삭제일 (논리 삭제)

  user        User      @relation(fields: [userId], references: [id])
  birthSupportData  BirthSupportData @relation(fields: [birthSupportDataId], references: [ id])
}

model Chat {
  id           Int       @id @default(autoincrement())
  userId       Int       // TODO: 인덱스 관리
  message      String     @db.Text
  role       SenderType
  messageType MessageType
  createdAt    DateTime  @default(now()) @map("created_at")

  user      User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("chat")
}

enum SenderType {
  user
  assistant
}

enum MessageType {
  normal
  relatedToSuicide
  askingGovernmentHelp
}